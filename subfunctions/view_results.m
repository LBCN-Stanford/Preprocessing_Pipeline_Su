function view_results(fname,nop)
% A script to review the results generated by two pipelines.
% Input files are Epoched_HFB (Su pipeline), SHFBXXX (Jessica pipeline),
% or LBCN (future) standard data structure -- Amy & Pedro's pipeline
if nargin == 0
    [filename,pathname] = uigetfile({'*.mat','Data format (*.mat)'},...
        'MultiSelect', 'on');
    fname = fullfile(pathname,filename);nop = 0;
elseif nargin ==1
    fc = cellstr(fname);
    [pathname,~]=fileparts(fc{1});nop = 0;
end
info = [];
head_file = cellstr(fname);
try
    dh = dir(head_file{1});
catch
    return;
end


%     if iscell(fname)
%         head_file = fname;
%     else
%         head_file{1} = fname;
%     end
signal = cell(length(head_file),1);
nan_all = cell(length(head_file),1);
D = cell(length(head_file),1);
plot_cond = [];
exclude = [];
labels=[];
conditionList = cell(length(head_file),1);
bch = cell(length(D),1);
for i = 1:length(head_file)
    if contains(head_file{i},'Epoched_HFB')
        LBCN_plot_HFB(head_file{i});
        return;
    elseif dh.bytes > 100000000 %if it is the concatenated data
        disp('Loading...');
        v = load(head_file{i});
        svn = find_file(pathname,'subjVar*',[]);
        if isempty(svn)
            disp('Cannot find subjVar file, skipping ... ');
        else
            sv = load(svn);
            fdn = string(fieldnames(sv));
            v.subjVar = getfield(sv,fdn);
        end
        fdn = string(fieldnames(v));
        dat = getfield(v,fdn(1));
        dat.sbj_name = v.subjVar.sbj_name;
%         try
%         if length(dat.labels) == length(v.subjVar.elect_names)
%             disp('Re-assignning channel labels based on subjVar info')
%             dat.labels = v.subjVar.elect_names;
%         end
%         catch
%         end
        s = dat.wave;
        signal{i}=permute(s,[2 3 1]);
        cn = size(signal{1},1);
        tn = size(signal{1},3);
        dn = size(signal{1},2);
        handles=[];
        %try
        %    labels = unique(v.data_all.trialinfo{1}.conds_math_memory);
        %    conditionList{i} = v.data_all.trialinfo{1}.conds_math_memory;
        %catch
        if isfield(dat,'trialinfo_all')
            labels = unique(dat.trialinfo_all{1}.condNames);
            conditionList{i} = dat.trialinfo_all{1}.condNames;
        else
            dat.trialinfo_all = dat.trialinfo;
            labels = unique(dat.trialinfo_all{1}.condNames);
            conditionList{i} = dat.trialinfo_all{1}.condNames;
        end
        plot_cond = 1:length(labels);
        nan_all{i} = false(size(signal{1}));
        for j = 1:cn
            for k = 1:tn
                try
                nan_all{i}(j,dat.trialinfo_all{j}.bad_inds{k},k) = true;
                catch
                    continue;
                end
            end
        end
        try
            D{i} = header(dat.fsample/2,cn,dat.labels,bch{i},pathname,v.subjVar);
        catch
            D{i} = header(dat.fsample/2,cn,dat.labels,bch{i},pathname);
        end
        if isfield(dat,'sbj_name')
            info.sbj_name = dat.sbj_name;
        end
        if isfield(dat,'project_name')
            info.project_name = dat.project_name;
        end
        if isfield(dat,'tf')
            info.tf = dat.tf;
        end
    else
        try
            [filepath,name,~] = fileparts(head_file{i});
            fixind = regexp(name,'DCchans')+8;
            [name2] = find_file(filepath,'/eM*.mat',name(fixind:end));
            if ~isempty(name2)
                D{i} = spm_eeg_load(name2);
                continue;
            end
        catch  
            try
                D{i} = spm_eeg_load(head_file{i});
                continue;
            catch
                var_file = head_file{i};
                v = load(var_file);
                D = v.df;
                plot_cond = v.plot_cond;
                exclude = v.exclude;
                break;
            end
        end
        try
            var_file = find_file(path(D{1}),'Var_gui',[]);
            v = load(var_file);
            plot_cond = v.plot_cond;
            exclude = v.exclude;
        catch
        end
    end
end
if isempty(signal{1})
   signal_all = format_signal([],D,plot_cond,exclude);
   nan_all = format_signal([],D,plot_cond,exclude);  
   labels = condlist(D{1});
   t = time(D{1});
   w1 = indsample(D{1},t(1));
   w2 = indsample(D{1},t(end));
   yl = [-0.3 2.5];
   sparam = 25;
else
   signal_all = format_signal(signal,D,plot_cond,exclude,labels,conditionList);
   nan_all = format_signal(nan_all,D,plot_cond,exclude,labels,conditionList);
   t = dat.time;
   w1 = 1;
   w2 = dn;
   yl = [-0.4 1];
   sparam = 30;
end
page = 1;
window = w1:w2;
bc_type = 2;
if isempty(plot_cond)
    plot_cond = 1:length(labels);
end
% if ~exist('bch','var')
%     bch = cell(length(D),1);
% elseif isempty(bch)
%     bch = cell(length(D),1);

% end
plot_window_App(signal_all, sparam,labels,D,window,plot_cond, page, yl, bch, t, [], bc_type, nan_all, info);
%plot_window(signal_all, sparam,labels,D,window,plot_cond, page, yl, bch, t, [], bc_type, nan_all, info);