function signal_all = LBCN_plot_HFB(fname,D,bch,exclude,conditionList,plot_cond,...
    save_print,type,pre_defined_bad, atf_check,twsmooth,twbc,dsamp,nop,task,sbjname)
%   Computes and plots the HFB power.
%
%   Input:      evtfile:    eventsSODATA_XXX.mat generated by
%               LBCN_read_events_diod_sodata function that contains events.categories info.
%               D:          eM*.mat generated by
%               LBCN_epoch_bc function. This is the epoched data in SPM
%               MEEG format. It can also be a [C x M x N] matrix of epoched data (in real time order),
%               where C = channels, M = data sample length, N = trials.
%               bch:        bad channel index (multiple sessions stored in
%               cells). Optional.
%               exclude:    pathological event indicies generated by
%               exclude_trial function. Optional.
%               condList:   list of conditions for each trial. Optional.
%               plot_cond:  which conditions to plot. Could be a set of cell
%               arrays containing the name of the condition,or the index of the condition.
%               Can also be 'subcat' (for VTC). Optional.
%               save_print:  put 1 if want the figures to be saved. Default
%               0, the results will be plotted and paused for inspection.
%               type:       1 = efficient plot using FFT.
%                           2 = t-f decomposition using wavelet.
%               pre_defined_bad:
%   Output:     figures.
%   -----------------------------------------
%   =^._.^=     Su Liu
%
%   suliu@standord.edu
%   -----------------------------------------

if nargin<1 || isempty(fname)
    fprintf('%s\n','---- Please select eventsSODATA file or Epoched_data ----');
    [filename,pathname] = uigetfile({'*.mat','Data format (*.mat)'},...
        'MultiSelect', 'on');
    fname = fullfile(pathname,filename);
    if isempty(fname)
        return;
    end
    evtfile = cellstr(fname);
    dir_curr = pathname;
end
if nargin<2 || isempty(D)
    if iscell(fname)
        evtfile = fname;
    else
        L = load(fname);
        if isfield(L,'beh_fp')
            D = L.D;
            evtfile = L.evtfile;
            bch = L.bch;
            signal_all = L.beh_fp;
            labels = L.labels;
            plot_cond = L.plot_cond;
            dir_curr=fileparts(fname);
            try
                all_nan = L.all_nan;
            catch
                all_nan = [];
            end
            try
                sbjname = L.information.sbj_name;
            catch
                sbjname = [];
            end
            try
                task = L.information.project_name;
            catch
                task = [];
            end
            try 
                information = L.information;
            catch
            end
            try
                window = L.window;
            catch
                window = 1:size(signal_all{1}{1},1);
            end
            try
                t = L.t;
            catch
                T = time(D{1});
                t = T(1:2:end);
                t = t + 0.05;
                t = t(1:length(window));
            end
            fprintf('%s\n','-------- Epoched signal loaded --------');
        elseif isfield(L,{'DAT','evtfile','exclude','conditionList','bch'})
            inputs = {'evtfile','DAT','bch','exclude','conditionList',...
                'plot_cond','save_print','type','exclude_ts','atf_check',...
                'twsmooth','twbc','dsamp','nop','task','sbjname'};
            fdn = fieldnames(L);
            varargin = cell(16,1);
            for ii = 1:length(inputs)
                if any(strcmp(fdn,inputs(ii)))
                    varargin{ii}=getfield(L,fdn{strcmp(fdn,inputs(ii))});
                end
                if exist(inputs{ii},'var')
                    eval(['inputvar = ',inputs{ii},';']);
                    varargin{ii} = inputvar;
                end
            end
%             D = L.DAT;
%             evtfile = L.evtfile;
%             bch = L.bch;
%             exclude = L.exclude;
%             exclude_ts = L.exclude_ts;
%             conditionList = L.conditionList;
%             plot_cond = L.plot_cond;
            fprintf('%s\n','-------- Epoched data loaded --------');
%            signal_all = LBCN_plot_HFB(evtfile,D,bch,exclude,conditionList,plot_cond,[],[],exclude_ts);
            signal_all = LBCN_plot_HFB(varargin{:});
            return;
        elseif isfield(L,'data_all')
            try
                view_results(evtfile);
            catch
                view_results(fname);
            end
            return;
        elseif length(size(getfield(L,char(fieldnames(L))))) == 3
            data = getfield(L,char(fieldnames(L)));
            fprintf('%s\n','-------- Data in matrix. Will compute the HFB only --------');
            signal_all = compute_HFB(data);
            return;
        else
            evtfile = cellstr(fname);
        end
    end
end
if ~exist('signal_all','var')
    if nargin<2 || isempty(D)
        evtfile = cellstr(fname);
        for i = 1:length(evtfile)
            [filepath,name,~] = fileparts(evtfile{i});
            fixind = regexp(name,'DCchans')+8;
            [name2] = find_file(filepath,'eM*.mat',name(fixind:end));
            if ~isempty(name2)
                
                D{i} = spm_eeg_load(name2);
                continue;
            else
                fprintf('%s\n','-------- Data file not found --------');
                [filename,pathname] = uigetfile({'*.mat','Data format (*.mat)'},...
                    'MultiSelect', 'on');
                names = fullfile(pathname,filename);
                if ~iscell(names)
                    n{1}=names;
                    names = n;
                end
                for ii = 1:length(evtfile)
                    try
                        D{ii} = spm_eeg_load(names{ii});
                    catch
                        load(names{i});
                    end
                end
                fprintf('%s\n','-------- Data loaded --------');
                break;
            end
        end
    end
    
    if nargin<3 || isempty(bch)
        evtfile = cellstr(fname); bch = cell(length(cellstr(evtfile)),1);
    end
    
    if nargin<6 || isempty(plot_cond)
        try
            task = identify_task(evtfile{1});
        catch
            task = identify_task(fname{1});
        end
        
        task_config(task);
        plot_cond = 1:D{1}.nconditions;
    end
end
if (nargin<4 || isempty(exclude)) && ~exist('exclude','var')
    exclude = repmat({cell(1,D{1}.nchannels)},length(evtfile),1);
end

if nargin<5 || isempty(conditionList)
    evtfile = cellstr(fname);
    for i=1:length(evtfile)
        try
            conditionList{i} = conditions(D{i});
        catch
            
            for jj=1:length(D{i}.trials)
                onset(jj) = D{i}.trials(jj).onset;
                stim{jj} = D{i}.trials(jj).label;
            end
            [I,A]=sort(onset);
            conditionList{i} = stim(A);
        end
    end
end
if nargin<7 || isempty(save_print)
    save_print = 0;
end
if nargin<8 || isempty(type)
    type = 2;
end
if nargin<9 || isempty(pre_defined_bad)
    pre_defined_bad = repmat({[]},length(evtfile),1);
end
if nargin<10 || isempty(atf_check)
    atf_check = 3;
end
try
    time_start = min(time(D{1}));
    time_end = max(time(D{1}));
catch
    time_start = D{1}.timeOnset;
    time_end = time_start + (D{1}.Nsamples-1)/D{1}.Fsample;
    D{1}.nsamples = D{1}.Nsamples;
end
if (nargin<13 || isempty(dsamp)) ||  ~exist('dsamp','var')
    dsamp = 2;
end
if (nargin<14)
    nop = 0;
end
merge = 0;
try
    fs = fsample(D{1});
catch
    fs = D{1}.Fsample;
end
labs = D{1}.condlist;
if ~exist('labels','var')
    labels = labs;
end
if ~exist('twsmooth','var') || isempty(twsmooth)
    %if nargin<11 || isempty(twsmooth)
        twsmooth = round([time_start+0.05 time_end-0.05]*fs);
    %end
    if nargin<12 || isempty(twbc)
        twbc = [twsmooth(1) 0];
    end
end

if iscell(plot_cond)
    if any(strcmp(plot_cond,'subcat'))
        labels = [{'faces'} {'bodies'} {'buildings & scenes'} {'numbers'} ...
            {'words'} {'logos & shapes'} {'other'}];
        plot_cond = [5 4 1 2 3 6];
        merge = 1;
    else
        for i = length(plot_cond)
            condid(i) = find(strcmpi(labs,plot_cond{i}));
        end
        plot_cond = condid;
    end
end

if ~exist('evtfile','var')
    evtfile = cellstr(fname);
end
Nt = length(plot_cond);
try
    cn = D{1}.nchannels;
catch 
    cn = length(D{1}.channels);
end
if ~exist('signal_all','var')
    all_plot = cell(Nt,1);
    all_plot2 = cell(Nt,1);
    all_tf = cell(Nt,1);
    total_raw = cell(length(cellstr(evtfile)),1);
    total_raw2 = cell(length(cellstr(evtfile)),1);
    total_nan = cell(length(cellstr(evtfile)),1);
    total_tf = cell(length(cellstr(evtfile)),1);
    total_tf2 = cell(length(cellstr(evtfile)),1);
    t = time_start:(time_end-time_start)/(D{1}.nsamples-1):time_end;
    t = t(1:dsamp:end);
    %window = round(((twsmooth(1) - time_start*1000)) +1 : ceil(((twsmooth(2)/1000-time_start)*1000)/1));
    window = ceil((twsmooth(1)/1000 - time_start)*fs+1 : ceil(((twsmooth(2)/1000-time_start)*fs)));
end
if isnumeric(twbc)
    window_bc = round(((twbc(1)/1000 - time_start)*fs) +1 : indsample(D{1},0));
else
    if length(cellstr(twbc)) == 3
        bls = str2num(twbc{2}) - time_start*fs;
        ble = str2num(twbc{3}) - time_start*fs;
    elseif length(cellstr(twbc)) == 1
        bls = num2str(window(end)-300);
        ble = num2str(window(end));
        twbc = {twbc bls ble};
    end
    window_bc = twbc;
end
%fbands = zeros(11,1);
fname=cellstr(fname);
dir_curr=fileparts(fname{1});
if ~exist('sbjname','var') || isempty(sbjname) || ~exist('task','var') || isempty(task) 
    sodir = find_file(dir_curr,'sodata*.mat',[]);
    [task,sbjname] = get_info(sodir);
    out = timer_getinfo(task,sbjname);
    task = out.task;
    sbjname = out.sname;
end 
information.sbj_name = sbjname;
information.project_name = task;
fbands = linspace(70,180,12);
if ~exist('signal_all','var')
    fprintf('%s\n','------ Calculating HFB ------')
    %% re-arrange the data, take out excluded trials%%%%%%%%%%
    
    sdata = cell(1,length(cellstr(evtfile)));
    sdata2 = cell(1,length(cellstr(evtfile)));
    sdata3 = cell(1,length(cellstr(evtfile)));
    tf = cell(1,length(cellstr(evtfile)));
    tf2 = cell(1,length(cellstr(evtfile)));
    
    for N=1:length(cellstr(evtfile))
        dsp = strcat('File ',' ',num2str(N),' / ',' ',num2str(length(cellstr(evtfile))));
        fprintf('%s\n',dsp);
        load(evtfile{N});
        ts=[];
        for i=1:length(events.categories)
            ts=[ts events.categories(i).start];
        end
        
        %         ts=events.categories.start;
        
        data = D{N}(:,:,:);
        pre_defined = pre_defined_bad{N};
        if ~isnumeric(window_bc)
            for cc = 1:length(events.categories)
                if strcmpi(events.categories(cc).name,window_bc{1})
                    window_bc{1} = events.categories(cc).stimNum;
                    break;
                end
            end
        end
        %% Just to test something. Comment this
        bc_type = 'z';
        %         type = 2;
        %         atf_check = 3;
        %% Signal 2 is the other un-chosen baseline correction method. (Just get ready for the plotting)
        [sig, sig2,nanidx, spec, spec2] = compute_HFB(data, fs, type, fbands, atf_check, bc_type,window_bc ,pre_defined, window, dsamp);
        cn = size(data,1);
        if length(ts) ~= size(sig,3)
            ts = trialonset(D{N});
            conditionList{N} = conditions(D{N});
        end
        [~,A]=sort(ts);
        sdata{N} = sig(:,:,A);
        sdata2{N} = sig2(:,:,A);
        sdata3{N} = nanidx(:,:,A);
         tf{N} = spec(:,:,:,A);
        tf2{N} = spec2(:,:,:,A);
        %% In case it crashes 0_0
        try
            %             Signal = evalin('base', 'Signal');
            %             Signal2 = evalin('base', 'Signal2');
            %             Signal{N} = sdata{N};
            %             Signal2{N} = sdata2{N};
            %
            assignin ('base','Signal',sdata);
            assignin ('base','Signal2',sdata2);
        catch
        end
        %% Some arrangements
        for i = 1:cn
            m = 1;
            dt=squeeze(sdata{N}(i,:,:));
            dt2=squeeze(sdata2{N}(i,:,:));
            dt3=squeeze(sdata3{N}(i,:,:));
            dtf=squeeze(tf{N}(i,:,:,:));
            dtf2=squeeze(tf2{N}(i,:,:,:));
            try
                ex=exclude{N}{i}(1,all(exclude{N}{i}));
            catch
                ex = [];
            end
            con=conditionList{N};
            if strcmp(con{1},con{2}) && strcmp(con{1},con{2}) && strcmp(con{1},con{3}) && strcmp(con{1},con{4}) && strcmp(con{1},con{5})
                con = con(A);
            end
            con(ex)=[];
            dt(:,ex)=[];
            dt2(:,ex)=[];
            dt3(:,ex)=[];
            dtf(:,:,ex)=[];
            dtf2(:,:,ex)=[];
            curr_id=false(Nt,size(dt,2));
            for k = plot_cond
                %ex=[];
                %curr_cond=labs(plot_cond(k));
                curr_cond=labels(k);
                
                if merge
                    if ~strcmp(curr_cond,'other')
                        if strcmp(curr_cond,'words')
                            try
                                curr_id(k,:)=strcmpi(con,curr_cond);
                            catch
                                aaa
                            end
                        else
                            curr_id(k,:)=contains(string(con),strsplit(string(curr_cond)));
                        end
                    else
                        curr_id(k,:)=~sum(curr_id);
                    end
                else
                    curr_id(k,:)=strcmpi(con,curr_cond);
                end
                total_raw{N}{m}{i}=dt(:,curr_id(k,:));
                total_raw2{N}{m}{i}=dt2(:,curr_id(k,:));
                total_nan{N}{m}{i}=dt3(:,curr_id(k,:));
                total_tf{N}{m}{i}=dtf(:,1:4:end,curr_id(k,:));%downsample the tf
                total_tf2{N}{m}{i}=dtf2(:,1:4:end,curr_id(k,:));
                m=m+1;
            end
        end
    end
    
    %% Merge multiple blocks %%%%%%%%%%
    
    if numel(total_raw)>1
        for nn=1:Nt
            for cc=1:cn
                currcond = [];
                currcond2 = [];
                currcond3 = [];
                currtf = [];
                currtf2 = [];
                for jj=1:numel(total_raw)
                    currcond=[currcond total_raw{jj}{nn}{cc}];
                    currcond2=[currcond2 total_raw2{jj}{nn}{cc}];
                    currcond3=[currcond3 total_nan{jj}{nn}{cc}];
                    currtf = cat(3, currtf, total_tf{jj}{nn}{cc});
                    currtf = cat(3, currtf, total_tf{jj}{nn}{cc});
                end
                all_plot{nn}{cc}=currcond;
                all_plot2{nn}{cc}=currcond2;
                all_nan{nn}{cc}=currcond3;
                all_tf{nn}{cc}=currtf;
                all_tf2{nn}{cc}=currtf2;
            end
        end
    else
        all_plot=total_raw{1};
        all_plot2=total_raw2{1};
        all_nan=total_nan;
        all_tf=total_tf;
        all_tf2=total_tf2{1};
    end
    beh_fp=all_plot;
    
       fprintf('------ Saving tfmaps ... \n');
        save(fullfile(dir_curr,strcat('Epoched_tfmap','.mat')),'all_tf');
        tf_file = fullfile(dir_curr,strcat('Epoched_tfmap','.mat'));
        information.tf = tf_file;
    signal_all=beh_fp;
    window = round((window(1) : dsamp : window(end))./dsamp);
    edge = round(30*fs/1000/dsamp);
    win = window(edge+1 : end - edge);
    window = win;
    t = t(window);
    fprintf('------ Saving signal ... \n');
    save(fullfile(dir_curr,strcat('Epoched_HFB','.mat')),'evtfile','D','bch',...
        'beh_fp','labels','plot_cond','type','bc_type','all_nan','window','t','information');
else
        try
            tf_file = find_file(fullfile(dir_curr),'Epoched_tf*.mat',[]);
            %load(tf_file);
            information.tf = tf_file;
        catch
            information.tf = [];
        end
end

% window = round((window(1) : dsamp : window(end))./dsamp);
% edge = round(30*fs/1000/dsamp);
% win = window(edge+1 : end - edge);
% window = win;
% t = t(window);
for j=1:length(labels)
    labels{j}(ismember(labels{j},'_'))=' ';
end
sparam = 25;
page = 1;
% try
%     information.tf = tf_file;
% catch
%     information.tf = [];
% end

% try
%     info.project_name = task;
%     info.sbj_name = sbjname;
% catch
% end
%% Run this when no GUI is needed

%Plot_script;

%% Run this to open a GUI and inspect the plots and images (electrodes)
try
fpath = dir_curr;
catch
[fpath,~,~] = fileparts(evtfile{1});
end
if ~exist('total_plot2','var')
    all_plot2 = cell(1,length(evtfile));
end

if ~exist('bc_type','var')
    bc_type = 'z';
end
if nop
    signal_all={signal_all,labels,D,window,plot_cond,t, all_plot2, bc_type,all_nan};
    return;
end

    plot_window_App(signal_all, sparam,labels,D,window,plot_cond, page, fpath, bch, t, all_plot2, bc_type,all_nan, information);
%% This is for earlier matlab versions (earlier than 2018a)
%    plot_window(signal_all, sparam,labels,D,window,plot_cond, page, path, bch, t, all_plot2, bc_type,all_nan, info);

